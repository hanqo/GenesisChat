package blockchain

import (
	"encoding/hex"
	"encoding/json"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"log"
	"math/big"
	"strconv"
	"strings"
)
const abiStr = "[{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"description_\",\"type\":\"string\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"programAddr_\",\"type\":\"address\"},{\"name\":\"programURL_\",\"type\":\"string\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"setProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entryCost_\",\"type\":\"uint256\"},{\"name\":\"exitCost_\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"setCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getCitizen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProgram\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"join\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"leave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCitizenList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"description_\",\"type\":\"string\"},{\"name\":\"entryCost_\",\"type\":\"uint256\"},{\"name\":\"exitCost_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"
const abiBin = `608060405273564f0d7c4456950dd5c0cc47e6fa3303219518066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006557600080fd5b5060405162001afa38038062001afa833981018060405260808110156200008b57600080fd5b810190808051640100000000811115620000a457600080fd5b82810190506020810184811115620000bb57600080fd5b8151856001820283011164010000000082111715620000d957600080fd5b50509291906020018051640100000000811115620000f657600080fd5b828101905060208101848111156200010d57600080fd5b81518560018202830111640100000000821117156200012b57600080fd5b5050929190602001805190602001909291908051906020019092919050505033600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360026000019080519060200190620001a6929190620001e1565b508260026001019080519060200190620001c2929190620001e1565b5081600260050181905550806002600601819055505050505062000290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022457805160ff191683800117855562000255565b8280016001018555821562000255579182015b828111156200025457825182559160200191906001019062000237565b5b50905062000264919062000268565b5090565b6200028d91905b80821115620002895760008160009055506001016200026f565b5090565b90565b61185a80620002a06000396000f3fe6080604052600436106100bf576000357c01000000000000000000000000000000000000000000000000000000009004806317d7de7c146100c45780631a092541146101545780632423f442146101e45780633b19e84a1461034d5780635765808f14610378578063807b60b7146105015780638914a8a0146105e7578063b31cf98414610662578063b688a36314610725578063bd3e19d414610747578063d66d9e1914610779578063f8b2cb4f1461079b578063fa54e99014610800575b600080fd5b3480156100d057600080fd5b506100d961086c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101195780820151818401526020810190506100fe565b50505050905090810190601f1680156101465780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016057600080fd5b50610169610911565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a957808201518184015260208101905061018e565b50505050905090810190601f1680156101d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f057600080fd5b5061034b6004803603606081101561020757600080fd5b810190808035906020019064010000000081111561022457600080fd5b82018360208201111561023657600080fd5b8035906020019184600183028401116401000000008311171561025857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001906401000000008111156102c557600080fd5b8201836020820111156102d757600080fd5b803590602001918460018302840111640100000000831117156102f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506109b6565b005b34801561035957600080fd5b50610362610a27565b6040518082815260200191505060405180910390f35b34801561038457600080fd5b506104ff6004803603608081101561039b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103d857600080fd5b8201836020820111156103ea57600080fd5b8035906020019184600183028401116401000000008311171561040c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460018302840111640100000000831117156104ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610af9565b005b34801561050d57600080fd5b506105e56004803603608081101561052457600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561055f57600080fd5b82018360208201111561057157600080fd5b8035906020019184600183028401116401000000008311171561059357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610bae565b005b3480156105f357600080fd5b506106206004803603602081101561060a57600080fd5b8101908080359060200190929190505050610c1a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066e57600080fd5b50610677610c5d565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106e95780820151818401526020810190506106ce565b50505050905090810190601f1680156107165780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61072d610d2f565b604051808215151515815260200191505060405180910390f35b34801561075357600080fd5b5061075c610f97565b604051808381526020018281526020019250505060405180910390f35b610781610fae565b604051808215151515815260200191505060405180910390f35b3480156107a757600080fd5b506107ea600480360360208110156107be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c5565b6040518082815260200191505060405180910390f35b34801561080c57600080fd5b5061081561130e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561085857808201518184015260208101905061083d565b505050509050019250505060405180910390f35b606060026000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b5050505050905090565b606060026001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ac5780601f10610981576101008083540402835291602001916109ac565b820191906000526020600020905b81548152906001019060200180831161098f57829003601f168201915b5050505050905090565b600115156109fa6040805190810160405280600e81526020017f7365744465736372697074696f6e000000000000000000000000000000000000815250848461139c565b1515141515610a0857600080fd5b8260026001019080519060200190610a2192919061175d565b50505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4f6e6c7920636f756e7472792063616e2063616c6c20746869732e000000000081525060200191505060405180910390fd5b600260040154905090565b60011515610b3d6040805190810160405280600a81526020017f73657450726f6772616d00000000000000000000000000000000000000000000815250848461139c565b1515141515610b4b57600080fd5b836002800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260026003019080519060200190610ba792919061175d565b5050505050565b60011515610bf26040805190810160405280600781526020017f736574436f737400000000000000000000000000000000000000000000000000815250848461139c565b1515141515610c0057600080fd5b836002600501819055508260026006018190555050505050565b6000600a82815481101515610c2b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060606002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600301808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d205780601f10610cf557610100808354040283529160200191610d20565b820191906000526020600020905b815481529060010190602001808311610d0357829003601f168201915b50505050509050915091509091565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4f6e6c7920636974697a656e2063616e2063616c6c20746869732e000000000081525060200191505060405180910390fd5b600260060154600260050154013410151515610ec7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001807f546865206d6f6e65792073656e74206d757374206265206c617267657220746881526020017f616e207468652073756d206f662074686520656e74727920616e64206578697481526020017f20636f737421000000000000000000000000000000000000000000000000000081525060600191505060405180910390fd5b6002600501546002600401600082825401925050819055506002600501543403600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a3390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001905090565b600080600260050154600260060154915091509091565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4f6e6c7920636974697a656e2063616e2063616c6c20746869732e000000000081525060200191505060405180910390fd5b34600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600260060154600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4661696c20746f2070617920746865206578697420636f73742100000000000081525060200191505060405180910390fd5b600260060154600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060026006015460026004016000828254019250508190555060006111f433611504565b9050600a805490508110156112bc57600a6001600a805490500381548110151561121a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8281548110151561125457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a8054809190600190036112b191906117dd565b5060019150506112c2565b60009150505b90565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600a80548060200260200160405190810160405280929190818152602001828054801561139257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611348575b5050505050905090565b6000600180600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506000611492308686604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183805190602001908083835b60208310151561144a5780518252602082019150602081019050602083039250611425565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405280519060200120611620565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114d68285611678565b73ffffffffffffffffffffffffffffffffffffffff161415156114f857600080fd5b60019150509392505050565b600080600090505b600a8054905081101561159c578273ffffffffffffffffffffffffffffffffffffffff16600a8281548110151561153f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561158f578091505061161b565b808060010191505061150c565b600a805490508114151515611619576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f436974697a656e206973206e6f7420666f756e6421000000000000000000000081525060200191505060405180910390fd5b505b919050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b60008060008061168785611705565b80935081945082955050505060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156116f0573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60008060006041845114151561171a57600080fd5b6000806000602087015192506040870151915060ff6041880151169050601b8160ff16101561174a57601b810190505b8083839550955095505050509193909250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061179e57805160ff19168380011785556117cc565b828001600101855582156117cc579182015b828111156117cb5782518255916020019190600101906117b0565b5b5090506117d99190611809565b5090565b815481835581811115611804578183600052602060002091820191016118039190611809565b5b505050565b61182b91905b8082111561182757600081600090555060010161180f565b5090565b9056fea165627a7a72305820ca05a7176290c616acdc990d45999b5cd7f4bc09ed7104e12f00776d91db69e60029`

type ABIHandler struct {
	abiObject abi.ABI
}

func NewABIHandler() *ABIHandler {

	abiObject, err := abi.JSON(strings.NewReader(abiStr))
	if err != nil {
		log.Fatal("Not able to parse ABI string")
		return nil
	}

	h := &ABIHandler{
		abiObject: abiObject,
	}
	return h
}

func (h *ABIHandler) packContractFunc(name string, inputs []string) []byte {

	var res []byte
	var err error

	if err != nil {
		log.Fatal("Not able to parse ABI string")
		return nil
	}

	switch name {
	case "": //deploy contract argv: string(name), string(description), uint(entryCost), uint(exitCost)
		entryCost := big.NewInt(0)
		entryCost, _ = entryCost.SetString(inputs[2], 10)

		exitCost := big.NewInt(0)
		exitCost, _ = exitCost.SetString(inputs[3], 10)

		res, err = h.abiObject.Pack("", inputs[0], inputs[1],  entryCost, exitCost)
		res = append(common.FromHex(abiBin), res...)

	case "join":
		res, err = h.abiObject.Pack(name)

	case "lookup":
		addr := common.HexToAddress(inputs[0])
		res, err = h.abiObject.Pack(name, addr)

	case "leave":
		res, err = h.abiObject.Pack(name)

	case "getCitizenList":
		res, err = h.abiObject.Pack(name)

	case "getCitizen":
		index, err := strconv.ParseUint(inputs[0], 10, 64)
		if err != nil {
			log.Fatal("input string not valid in contract getCitizen")
			return nil
		}
		res, err = h.abiObject.Pack(name, index)

	case "getBalance":
		addr := common.HexToAddress(inputs[0])
		res, err = h.abiObject.Pack(name, addr)

	case "getName":
		res, err = h.abiObject.Pack(name)

	case "getDescription":
		res, err = h.abiObject.Pack(name)

	case "setDescription":
		res, err = h.abiObject.Pack(name, inputs[0])

	case "getProgram":
		res, err = h.abiObject.Pack(name)

		//TODO:change func in contract from string to address
	case "setProgram":
		addr := common.HexToAddress(inputs[0])
		nonce := big.NewInt(0)
		nonce, _ = nonce.SetString(inputs[1], 10)
		sig, _ := hex.DecodeString(inputs[2])
		res, err = h.abiObject.Pack(name, addr, nonce, sig)

	case "getCost":
		res, err = h.abiObject.Pack(name)

	case "setCost":
		entryCost := big.NewInt(0)
		entryCost, _ = entryCost.SetString(inputs[0], 10)
		exitCost := big.NewInt(0)
		exitCost, _ = exitCost.SetString(inputs[1], 10)
		nonce := big.NewInt(0)
		nonce, _ = nonce.SetString(inputs[2], 10)
		sig, _ := hex.DecodeString(inputs[3])

		res, err = h.abiObject.Pack(name, entryCost,exitCost,nonce,sig)

	case "getTreasury":

		res, err = h.abiObject.Pack(name)

	default:
		log.Fatal("input function unrecognized")
	}

	if err != nil {
		log.Fatal("Not able to pack contract function")
		return nil
	}
	return res

}

func (h *ABIHandler) unpackContractFunc(data []byte, name string) ([]string, error) {
	var output[] string
	var err error

	switch name {
	case "lookup":
		var tmp bool
		err = h.abiObject.Unpack(&tmp, name, data)
		if err != nil {
			log.Fatal("input string not valid in contract getCitizen")
			return nil, err
		}

		output = append(output,strconv.FormatBool(tmp))

	case "getCitizenList":

		type citizen struct {
			name    string
			balance *big.Int
		}
		var tmp []citizen
		err = h.abiObject.Unpack(&tmp, name, data)
		if err != nil {
			log.Fatal("input string not valid in contract getCitizen")
			return nil, err
		}

		btmp, _ := json.Marshal(tmp)
		output = append(output, string(btmp))

	case "getCitizen":
		type citizen struct {
			name    string
			balance *big.Int
		}
		var tmp citizen

		err = h.abiObject.Unpack(&tmp, name, data)
		btmp, _ := json.Marshal(tmp)

		output = append(output,string(btmp))

	case "getBalance":
		var tmp *big.Int
		err = h.abiObject.Unpack(&tmp, name, data)

		output = append(output,tmp.String())

	case "getName":
		var tmp string
		err = h.abiObject.Unpack(&tmp, name, data)
		output = append(output,tmp)

	case "getDescription":
		var tmp string
		err = h.abiObject.Unpack(&tmp, name, data)
		output = append(output,tmp)

	case "getProgram":

		type Return struct{
		ret0 common.Address
		ret1 string
	    }
		var res Return
		err = h.abiObject.Unpack(&res, name, data)
		output = append(output,res.ret0.String(),res.ret1)

	case "getCost":

		out := [2]*big.Int{big.NewInt(0), big.NewInt(0)}

		err = h.abiObject.Unpack(&out, name, data)
		output = append(output,(*out[0]).String(),(*out[1]).String())

	case "getTreasury":
		var tmp *big.Int
		err = h.abiObject.Unpack(&tmp, name, data)
		output = append(output,tmp.String())

	default:
		log.Fatal("input function unrecognized")

	}

	if err != nil {
		log.Fatal("Not able to unpack contract function")
		return nil, err
	}
	return output, nil

}

//
//func packContractFunc(methodName string, params []MsgParam) [] byte{
//
//	abiObj,err:=abi.JSON(strings.NewReader(abiStr))
//	typeRegex := regexp.MustCompile("([a-zA-Z]+)(([0-9]+)(x([0-9]+))?)?")
//
//	if err!=nil {
//		log.Fatal("Not able to parse ABI string")
//		return nil
//	}
//	method,exists := abiObj.Methods[methodName]
//
//	if !exists {
//		log.Fatal("Method not exist")
//		return nil
//	}
//
//	if len(params)!=len(method.Inputs) {
//		log.Fatal("Invalid number of parameters. Method requires %v, but %v provided",len(method.Inputs),len(params))
//		return nil
//	}
//
//	methodParams:=make([]interface{},0,100)
//	for i :=range method.Inputs {
//
//		matches := typeRegex.FindAllStringSubmatch(params[i].typ, -1)
//		if len(matches) == 0 {
//			log.Fatal("invalid type '%v'", params[i].typ)
//		}
//		parsedType := matches[0]
//
//		if strings.Count(params[i].typ, "[") != 0 {
//			strSets :=  strings.Split(params[i].value, " ")
//
//			//TODO(xrisheng): Support 2D Array
//			for _, str := range strSets{
//				tmp, err := forEachStrToValue(parsedType[0], str)
//				if err!=nil {
//					log.Fatal("Failed to convert string %v to value : %v" ,i ,err)
//					return nil
//				}
//				methodParams = append(methodParams,tmp)
//			}
//		} else{
//			v,err:= forEachStrToValue(parsedType[0], params[i].value)
//
//			if err!=nil {
//				log.Fatal("Failed to convert string %v to value : %v" ,i ,err)
//				return nil
//			}
//			methodParams=append(methodParams,v)
//		}
//	}
//
//	bin,err:=abiObj.Pack(methodName, methodParams...)
//
//	if err!=nil {
//		log.Fatal("Cannot convert json ABI to binary")
//		return nil
//	}
//
//	return bin
//}
//
//
//func forEachStrToValue(typ string, strValue string) (v interface{}, err error){
//	param := strings.TrimSpace(strValue)
//
//	switch typ {
//
//	case "string":
//		strVal:=new(string)
//		v =strVal
//		err=json.Unmarshal([]byte(strValue),v)
//
//	case "int", "uint":
//		val:=big.NewInt(0)
//		_,success:=val.SetString(param,10)
//		if !success {
//			log.Fatal("Invalid numeric (base 10) value: %v",param)
//		}
//		v=val
//
//	case "address":
//		if !((len(param)==(common.AddressLength*2+2)) || (len(param)==common.AddressLength*2)) {
//			log.Fatal("Invalid address length (%v), must be 40 (unprefixed) or 42 (prefixed) chars",len(param))
//		} else {
//			var addr common.Address
//			if len(param)==(common.AddressLength*2+2) {
//				addr=common.HexToAddress(param)
//			} else {
//				var data []byte
//				data,err=hex.DecodeString(param)
//				addr.SetBytes(data)
//			}
//			v=addr
//		}
//
//	case "hash":
//		if !((len(param)==(common.HashLength*2+2)) || (len(param)==common.HashLength*2)) {
//			log.Fatal("Invalid hash length, must be 64 (unprefixed) or 66 (prefixed) chars")
//
//		} else {
//			var hash common.Hash
//			if len(param)==(common.HashLength*2+2) {
//				hash=common.HexToHash(param)
//			} else {
//				var data []byte
//				data,err=hex.DecodeString(param)
//				hash.SetBytes(data)
//			}
//			v=hash
//		}
//
//	case "bytes":
//		if len(param)>2 {
//			if (param[0]=='0') && (param[1]=='x') {
//				param=param[2:] // cut 0x prefix
//			}
//		}
//		decodedBytes,_:=hex.DecodeString(param)
//		v=decodedBytes
//
//	case "bool":
//		val:=new(bool)
//		v=val
//		_=json.Unmarshal([]byte(param),v)
//
//	default:
//		log.Fatal("Not supported parameter type: %s", typ)
//	}
//	return v,err
//}
